// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
//zx
   Or8Way(in = x[0..7], out = a);
   Or8Way(in = x[8..15], out = b);
   Or(a = a, b = b, out = selx);
   Not16(in = x, out = zerox1);
   Mux16(a = zerox1, b = x, sel = selx, out = zerox2);
   Mux16(a = zerox2, b = x, sel = zx, out = zerx);
//zy
   Or8Way(in = y[0..7], out = c);
   Or8Way(in = y[8..15], out = d);
   Or(a = c, b = d, out = sely);
   Not16(in = x, out = zeroy1);
   Mux16(a = zeroy1, b = y, sel = sely, out = zeroy2);
   Mux16(a = zeroy2, b = y, sel = zy, out = zery);
//nx
   Not16(in = zerx, out = notx);
   Mux16(a = notx, b = zerx, sel = nx, out = ntx);
//ny
   Not16(in = zery, out = noty);
   Mux16(a = noty, b = zery, sel = ny, out = nty);
//f
   And16(a = ntx, b = nty, out = xogy);
   Add16(a = ntx, b = nty, out = sum);
   Mux16(a = sum, b = xogy, sel = f, out = outf);
//no
   Not16(in = outf, out = notout);
   Mux16(a = notout, b = outf, sel = no, out = ntout);
//zr
   Not16(in = ntout, out = ones);
   And16(a = ones, b = true, out = outzr);
   Or8Way(in = outzr[0..7], out = e);
   Or8Way(in = outzr[8..15], out = f);
   Or(a = e, b = f, out = selzr);
   Mux16(a = true, b = selzr, sel = selzr, out = selzr2);

   Mux16(a = selzr2, b = selzr, sel = zr, out = zrout);
//ng
   Mux(a = out[0], b = out[0], sel = ng, out = ngout);
}